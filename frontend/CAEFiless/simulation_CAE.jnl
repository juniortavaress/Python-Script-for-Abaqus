# -*- coding: mbcs -*-
from part import *
from step import *
from material import *
from section import *
from assembly import *
from interaction import *
from mesh import *
from visualization import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='restartMode')
del mdb.models['Model-1']
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='SingleSimulation')
mdb.models['SingleSimulation'].Material(name='DA718')
mdb.models['SingleSimulation'].materials['DA718'].SpecificHeat(dependencies=0, 
    law=CONSTANTVOLUME, table=((440600000.0, 20.0), (459700000.0, 100.0), (
    486700000.0, 300.0), (520900000.0, 500.0), (559900000.0, 600.0), (
    606000000.0, 650.0), (610900000.0, 700.0), (662000000.0, 800.0), (
    651000000.0, 900.0), (673000000.0, 1000.0), (710100000.0, 1100.0), (
    710100000.0, 1200.0)), temperatureDependency=ON)
mdb.models['SingleSimulation'].materials['DA718'].setValues(materialIdentifier=
    '')
mdb.models['SingleSimulation'].materials['DA718'].setValues(description=
    '[PENG20] (S.72)')
mdb.models['SingleSimulation'].materials['DA718'].Elastic(dependencies=0, 
    moduli=LONG_TERM, noCompression=OFF, noTension=OFF, table=((217000.0, 0.3, 
    20.0), (155000.0, 0.3, 900.0)), temperatureDependency=ON, type=ISOTROPIC)
mdb.models['SingleSimulation'].materials['DA718'].Density(dependencies=0, 
    distributionType=UNIFORM, fieldName='', table=((8.22e-09, ), ), 
    temperatureDependency=OFF)
mdb.models['SingleSimulation'].materials['DA718'].InelasticHeatFraction(
    fraction=0.9)
mdb.models['SingleSimulation'].materials['DA718'].Conductivity(dependencies=0, 
    table=((10.31, 20.0), (11.9, 100.0), (15.2, 300.0), (18.5, 500.0), (20.3, 
    600.0), (24.15, 700.0), (26.09, 800.0), (25.7, 900.0), (26.3, 1000.0), (
    30.95, 1100.0), (30.95, 1200.0)), temperatureDependency=ON, type=ISOTROPIC)
mdb.models['SingleSimulation'].materials['DA718'].JohnsonCookDamageInitiation(
    alpha=0.0, definition=MSFLD, dependencies=0, direction=NMORI, feq=10.0, 
    fnn=10.0, fnt=10.0, frequency=1, ks=0.0, numberImperfections=4, omega=1.0, 
    position=CENTROID, table=((0.40583, 0.75, -1.45, 0.04, 0.89, 1340.0, 25.0, 
    0.001), ), temperatureDependency=OFF, tolerance=0.05)
mdb.models['SingleSimulation'].materials['DA718'].johnsonCookDamageInitiation.DamageEvolution(
    degradation=MAXIMUM, dependencies=0, mixedModeBehavior=MODE_INDEPENDENT, 
    modeMixRatio=ENERGY, power=None, softening=TABULAR, table=((0.0, 0.0), (
    0.030888524, 0.0003298), (0.059978241, 0.0006596), (0.087373904, 
    0.0009894), (0.113174168, 0.0013192), (0.137471942, 0.001649), (
    0.160354723, 0.0019788), (0.181904915, 0.0023086), (0.202200122, 
    0.0026384), (0.221313428, 0.0029682), (0.239313661, 0.003298), (
    0.256265642, 0.0036278), (0.272230417, 0.0039576), (0.287265476, 
    0.0042874), (0.301424961, 0.0046172), (0.314759862, 0.004947), (
    0.327318199, 0.0052768), (0.339145195, 0.0056066), (0.350283441, 
    0.0059364), (0.360773045, 0.0062662), (0.370651783, 0.006596), (
    0.379955228, 0.0069258), (0.388716882, 0.0072556), (0.396968297, 
    0.0075854), (0.404739187, 0.0079152), (0.412057536, 0.008245), (
    0.418949697, 0.0085748), (0.42544049, 0.0089046), (0.431553289, 0.0092344), 
    (0.437310106, 0.0095642), (0.442731672, 0.009894), (0.447837511, 
    0.0102238), (0.452646009, 0.0105536), (0.457174482, 0.0108834), (
    0.461439237, 0.0112132), (0.465455632, 0.011543), (0.46923813, 0.0118728), 
    (0.472800353, 0.0122026), (0.476155128, 0.0125324), (0.479314536, 
    0.0128622), (0.482289954, 0.013192), (0.485092098, 0.0135218), (
    0.487731058, 0.0138516), (0.490216336, 0.0141814), (0.492556883, 
    0.0145112), (0.494761128, 0.014841), (0.496837007, 0.0151708), (
    0.498791996, 0.0155006), (0.500633136, 0.0158304), (0.502367056, 
    0.0161602), (0.504, 0.01649)), temperatureDependency=OFF, type=
    DISPLACEMENT)
mdb.models['SingleSimulation'].materials['DA718'].Plastic(dataType=HALF_CYCLE, 
    dependencies=0, hardening=JOHNSON_COOK, numBackstresses=1, rate=OFF, 
    strainRangeDependency=OFF, table=((1262.0, 1354.0, 0.5, 1.08, 1340.0, 
    20.0), ), temperatureDependency=OFF)
mdb.models['SingleSimulation'].materials['DA718'].plastic.RateDependent(
    dependencies=0, table=((0.006, 0.001), ), temperatureDependency=OFF, type=
    JOHNSON_COOK)
mdb.models['SingleSimulation'].Material(name='WG-300')
mdb.models['SingleSimulation'].materials['WG-300'].Elastic(dependencies=0, 
    moduli=LONG_TERM, noCompression=OFF, noTension=OFF, table=((393000.0, 
    0.23), ), temperatureDependency=OFF, type=ISOTROPIC)
mdb.models['SingleSimulation'].materials['WG-300'].Density(dependencies=0, 
    distributionType=UNIFORM, fieldName='', table=((4e-09, ), ), 
    temperatureDependency=OFF)
mdb.models['SingleSimulation'].materials['WG-300'].setValues(description=
    'WG-300 Greenleaf\n')
mdb.models['SingleSimulation'].materials['WG-300'].SpecificHeat(dependencies=0, 
    law=CONSTANTVOLUME, table=((715000000.0, 25.0), (875000000.0, 100.0), (
    990000000.0, 200.0), (1060000000.0, 300.0), (1110000000.0, 400.0), (
    1150000000.0, 500.0), (1175000000.0, 600.0), (1205000000.0, 700.0), (
    1225000000.0, 800.0), (1245000000.0, 900.0), (1265000000.0, 1000.0)), 
    temperatureDependency=ON)
mdb.models['SingleSimulation'].materials['WG-300'].setValues(
    materialIdentifier='')
mdb.models['SingleSimulation'].materials['WG-300'].Conductivity(dependencies=0, 
    table=((35.0, 25.0), (28.344, 50.0), (22.532, 200.0), (18.869, 300.0), (
    16.322, 400.0), (14.252, 500.0), (12.978, 600.0), (11.783, 700.0), (10.748, 
    800.0), (10.032, 900.0), (9.315, 1000.0)), temperatureDependency=ON, type=
    ISOTROPIC)
mdb.models['SingleSimulation'].ConstrainedSketch(name='sketchChipPlate', 
    sheetSize=200.0)
mdb.models['SingleSimulation'].sketches['sketchChipPlate'].rectangle(point1=(
    0.0, 0.0), point2=(1.5, 0.01))
mdb.models['SingleSimulation'].Part(dimensionality=THREE_D, name='ChipPlate', 
    type=DEFORMABLE_BODY)
mdb.models['SingleSimulation'].parts['ChipPlate'].BaseSolidExtrude(depth=0.02, 
    sketch=mdb.models['SingleSimulation'].sketches['sketchChipPlate'])
mdb.models['SingleSimulation'].parts['ChipPlate'].ReferencePoint(point=(0.0, 
    0.01, 0.01))
mdb.models['SingleSimulation'].parts['ChipPlate'].Set(name='PlateRP', 
    referencePoints=(
    mdb.models['SingleSimulation'].parts['ChipPlate'].referencePoints[2], ))
mdb.models['SingleSimulation'].parts['ChipPlate'].Set(name='PlateRP', 
    referencePoints=(
    mdb.models['SingleSimulation'].parts['ChipPlate'].referencePoints[2], ))
mdb.models['SingleSimulation'].parts['ChipPlate'].Set(cells=
    mdb.models['SingleSimulation'].parts['ChipPlate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='PlateDomain')
mdb.models['SingleSimulation'].HomogeneousSolidSection(material='WG-300', name=
    'ChipPlateSection', thickness=None)
mdb.models['SingleSimulation'].parts['ChipPlate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['SingleSimulation'].parts['ChipPlate'].sets['PlateDomain'], 
    sectionName='ChipPlateSection', thicknessAssignment=FROM_SECTION)
mdb.models['SingleSimulation'].parts['ChipPlate'].Surface(name=
    'ChipPlateSurface', side1Faces=
    mdb.models['SingleSimulation'].parts['ChipPlate'].faces.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['SingleSimulation'].parts['ChipPlate'].setElementType(elemTypes=(
    None, ElemType(elemCode=C3D6, elemLibrary=EXPLICIT), ElemType(
    elemCode=C3D4, elemLibrary=EXPLICIT)), regions=(
    mdb.models['SingleSimulation'].parts['ChipPlate'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['SingleSimulation'].parts['ChipPlate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.01)
mdb.models['SingleSimulation'].parts['ChipPlate'].generateMesh()
mdb.models['SingleSimulation'].ConstrainedSketch(name='sketchEulerian', 
    sheetSize=20.0)
mdb.models['SingleSimulation'].sketches['sketchEulerian'].rectangle(point1=(
    0.0, 0.0), point2=(3.8, 5.0))
mdb.models['SingleSimulation'].Part(dimensionality=THREE_D, name='Eulerian', 
    type=EULERIAN)
mdb.models['SingleSimulation'].parts['Eulerian'].BaseSolidExtrude(depth=0.02, 
    sketch=mdb.models['SingleSimulation'].sketches['sketchEulerian'])
mdb.models['SingleSimulation'].ConstrainedSketch(gridSpacing=0.31, name=
    'sketchEulerinPartition', sheetSize=12.76, transform=
    mdb.models['SingleSimulation'].parts['Eulerian'].MakeSketchTransform(
    sketchPlane=mdb.models['SingleSimulation'].parts['Eulerian'].faces[4], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['SingleSimulation'].parts['Eulerian'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['SingleSimulation'].parts['Eulerian'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].Line(point1=(
    1.5, 0.0), point2=(1.5, 5.0))
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[6])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[3]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[6])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[4]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[3])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[5]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[5])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].Line(point1=(
    2.7, 0.0), point2=(2.7, 5.0))
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[7])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[3]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[7])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[6]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[3])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[7]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[5])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].Line(point1=(
    3.0, 0.0), point2=(3.0, 5.0))
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[8])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[3]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[8])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[8]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[3])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[9]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[5])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].Line(point1=(
    3.3, 0.0), point2=(3.3, 5.0))
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[9])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[3]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[9])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[10]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[3])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[11]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[5])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].Line(point1=(
    0.0, 2.8), point2=(3.8, 2.8))
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[10])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[2]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[10])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[12]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[2])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[13]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[4])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].Line(point1=(
    0.0, 1.3), point2=(3.8, 1.3))
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[11])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[2]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[11])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[14]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[2])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[15]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[4])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].Line(point1=(
    0.0, 1.23), point2=(3.8, 1.23))
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[12])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[2]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[12])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[16]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[2])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[17]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[4])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].Line(point1=(
    0.0, 1.1), point2=(3.8, 1.1))
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[13])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[2]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[13])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[18]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[2])
mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].vertices[19]
    , entity2=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'].geometry[4])
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionFaceBySketch(faces=
    mdb.models['SingleSimulation'].parts['Eulerian'].faces.getSequenceFromMask(
    ('[#10 ]', ), ), sketch=
    mdb.models['SingleSimulation'].sketches['sketchEulerinPartition'], 
    sketchUpEdge=mdb.models['SingleSimulation'].parts['Eulerian'].edges[7])
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[3], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[5], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[7], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[11], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[14], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[18], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[19], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[22], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[28], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[31], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[34], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[35], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[38], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[42], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[45], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[46], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[47], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[52], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[55], 
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[57]), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[62], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#8 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[51], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[85], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#10 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[62], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[5], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#20 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[73], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[13], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#40 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[82], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[21], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#100 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[82], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[29], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#200 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[89], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[37], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#400 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[99], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[42], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#800 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[103], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[47], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#400 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[100], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[55], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#800 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[109], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[62], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1000 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[116], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[67], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#2000 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[122], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[45], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#2000 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[120], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[50], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#4000 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[126], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[57], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[133], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[62], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[137], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[67], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#10000 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[138], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[50], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[142], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[58], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[145], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[63], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].PartitionCellByExtrudeEdge(
    cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[145], ), line=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges[68], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Eulerian'].Set(faces=
    mdb.models['SingleSimulation'].parts['Eulerian'].faces.getSequenceFromMask(
    ('[#0:2 #f0 #800 ]', ), ), name='WorkpieceBottom')
mdb.models['SingleSimulation'].parts['Eulerian'].Set(cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1ffffff ]', ), ), name='EulerDomain')
mdb.models['SingleSimulation'].parts['Eulerian'].Set(cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#eee00 ]', ), ), name='WorkpieceDomain')
mdb.models['SingleSimulation'].parts['Eulerian'].Set(cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#400020 ]', ), ), name='KssDomain')
mdb.models['SingleSimulation'].EulerianSection(data={'da718-1': 'DA718'}, name=
    'EulerSection')
mdb.models['SingleSimulation'].parts['Eulerian'].Set(cells=
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1ffffff ]', ), ), name='EulerDomain')
mdb.models['SingleSimulation'].parts['Eulerian'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['SingleSimulation'].parts['Eulerian'].sets['EulerDomain'], 
    sectionName='EulerSection', thicknessAssignment=FROM_SECTION)
mdb.models['SingleSimulation'].parts['Eulerian'].setElementType(elemTypes=(
    ElemType(elemCode=EC3D8RT, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=UNKNOWN_WEDGE, 
    elemLibrary=EXPLICIT), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['SingleSimulation'].parts['Eulerian'].cells.getSequenceFromMask(
    ('[#1ffffff ]', ), ), ))
mdb.models['SingleSimulation'].parts['Eulerian'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.2)
mdb.models['SingleSimulation'].parts['Eulerian'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#0:3 #2082082 #200000 ]', ), ), end2Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#0:3 #208208 #8800000 ]', ), ), maxSize=0.2, minSize=0.06)
mdb.models['SingleSimulation'].parts['Eulerian'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#0:2 #21084800 #0 #1000 ]', ), ), end2Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#0:2 #10842000 #0 #110000 ]', ), ), maxSize=0.06, minSize=0.006)
mdb.models['SingleSimulation'].parts['Eulerian'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#0 #150000 #40000500 #8000001 #402000 ]', ), ), end2Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#0:3 #1400000 ]', ), ), maxSize=0.2, minSize=0.006)
mdb.models['SingleSimulation'].parts['Eulerian'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#21020404 #0:3 #20000 ]', ), ), end2Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#408101 #0:3 #280 ]', ), ), maxSize=0.03, minSize=0.006)
mdb.models['SingleSimulation'].parts['Eulerian'].seedEdgeByBias(biasMethod=
    SINGLE, constraint=FINER, end1Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#0:4 #5000000 ]', ), ), end2Edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#1a000000 #0:2 #d0000000 #5a ]', ), ), maxSize=0.2, minSize=0.03)
mdb.models['SingleSimulation'].parts['Eulerian'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#40000000 #31a28c63 #c6 #0 #ccc00 ]', ), ), minSizeFactor=0.1, size=
    0.006)
mdb.models['SingleSimulation'].parts['Eulerian'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#340000 #600000c #18000 #150 ]', ), ), minSizeFactor=0.1, size=0.006)
mdb.models['SingleSimulation'].parts['Eulerian'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['SingleSimulation'].parts['Eulerian'].edges.getSequenceFromMask(
    ('[#68d0 #c0003180 #6300018 #155400 ]', ), ), minSizeFactor=0.1, size=
    0.006)
mdb.models['SingleSimulation'].parts['Eulerian'].generateMesh()
mdb.models['SingleSimulation'].ConstrainedSketch(name='SketchTool', sheetSize=
    200.0)
mdb.models['SingleSimulation'].sketches['SketchTool'].Line(point1=(0.0, 0.0), 
    point2=(10.6401720046997, 0.0))
mdb.models['SingleSimulation'].sketches['SketchTool'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[2])
mdb.models['SingleSimulation'].sketches['SketchTool'].Line(point1=(0.0, 10.0), 
    point2=(0.0, 1.25))
mdb.models['SingleSimulation'].sketches['SketchTool'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[3])
mdb.models['SingleSimulation'].sketches['SketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[3], 
    entity2=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[0])
mdb.models['SingleSimulation'].sketches['SketchTool'].setAsConstruction(
    objectList=(
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[3], 
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[2]))
mdb.models['SingleSimulation'].sketches['SketchTool'].FixedConstraint(entity=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[3])
mdb.models['SingleSimulation'].sketches['SketchTool'].Line(point1=(
    3.31129169464111, 1.25408506393433), point2=(11.7126932144165, 
    5.62865686416626))
mdb.models['SingleSimulation'].sketches['SketchTool'].Line(point1=(
    11.98082447052, 7.72666597366333), point2=(11.98082447052, 13.75))
mdb.models['SingleSimulation'].sketches['SketchTool'].Line(point1=(
    9.38889980316162, 13.6635837554932), point2=(3.17722415924072, 
    13.6635837554932))
mdb.models['SingleSimulation'].sketches['SketchTool'].Line(point1=(3.75, 12.5), 
    point2=(2.99847316741943, 3.93239545822144))
mdb.models['SingleSimulation'].sketches['SketchTool'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[6])
mdb.models['SingleSimulation'].sketches['SketchTool'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[5])
mdb.models['SingleSimulation'].sketches['SketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[4], 
    entity2=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[0])
mdb.models['SingleSimulation'].sketches['SketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[6], 
    entity2=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[5])
mdb.models['SingleSimulation'].sketches['SketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[8], 
    entity2=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[7])
mdb.models['SingleSimulation'].sketches['SketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[10], 
    entity2=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[9])
mdb.models['SingleSimulation'].sketches['SketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[11], 
    entity2=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[0])
mdb.models['SingleSimulation'].sketches['SketchTool'].AngularDimension(line1=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[4], line2=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[2], 
    textPoint=(18.2371864318848, 2.41468572616577), value=3.0)
mdb.models['SingleSimulation'].sketches['SketchTool'].ObliqueDimension(
    textPoint=(10.5507974624634, -1.29030799865723), value=3.35, vertex1=
    mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[0], vertex2=
    mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[5])
mdb.models['SingleSimulation'].sketches['SketchTool'].AngularDimension(line1=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[7], line2=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[3], 
    textPoint=(0.31717586517334, 7.36955785751343), value=12.0)
mdb.models['SingleSimulation'].sketches['SketchTool'].ObliqueDimension(
    textPoint=(0.0, 8.75), value=3.35, vertex1=
    mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[9], vertex2=
    mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[0])
mdb.models['SingleSimulation'].sketches['SketchTool'].FilletByRadius(curve1=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[4], curve2=
    mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[7], 
    nearPoint1=(3.86042213439941, 1.10268461704254), nearPoint2=(
    4.32205963134766, 0.249606490135193), radius=0.08)
mdb.models['SingleSimulation'].sketches['SketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[4], 
    entity2=mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[2])
mdb.models['SingleSimulation'].sketches['SketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['SketchTool'].vertices[11], 
    entity2=mdb.models['SingleSimulation'].sketches['SketchTool'].geometry[3])
mdb.models['SingleSimulation'].Part(dimensionality=THREE_D, name='Tool', type=
    DEFORMABLE_BODY)
mdb.models['SingleSimulation'].parts['Tool'].BaseSolidExtrude(depth=0.02, 
    sketch=mdb.models['SingleSimulation'].sketches['SketchTool'])
mdb.models['SingleSimulation'].ConstrainedSketch(gridSpacing=0.3, name=
    'sketchTool', sheetSize=12.33, transform=
    mdb.models['SingleSimulation'].parts['Tool'].MakeSketchTransform(
    sketchPlane=mdb.models['SingleSimulation'].parts['Tool'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['SingleSimulation'].parts['Tool'].edges[7], 
    sketchOrientation=RIGHT, origin=(1.923927, 2.470625, 0.02)))
mdb.models['SingleSimulation'].parts['Tool'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['SingleSimulation'].sketches['sketchTool'])
mdb.models['SingleSimulation'].sketches['sketchTool'].Line(point1=(
    -1.33219867034149, -2.36441900014877), point2=(-0.154028704597473, 
    -2.28348900556564))
mdb.models['SingleSimulation'].sketches['sketchTool'].ObliqueDimension(
    textPoint=(-0.0696328191299438, -2.04407115459442), value=1.5, vertex1=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[6], vertex2=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[7])
mdb.models['SingleSimulation'].sketches['sketchTool'].ParallelConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[5], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[7])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[6], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[5])
mdb.models['SingleSimulation'].sketches['sketchTool'].Line(point1=(-1.65, 
    -2.25), point2=(-1.275, -1.65))
mdb.models['SingleSimulation'].sketches['sketchTool'].ObliqueDimension(
    textPoint=(-1.53137355132294, -1.76418836593628), value=1.5, vertex1=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[8], vertex2=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[9])
mdb.models['SingleSimulation'].sketches['sketchTool'].ParallelConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[8], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[2])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[6], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[8])
mdb.models['SingleSimulation'].sketches['sketchTool'].Spot(point=(-0.45, 
    -2.25))
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[5], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[10])
mdb.models['SingleSimulation'].sketches['sketchTool'].ObliqueDimension(
    textPoint=(-0.381290843917847, -2.48147197246552), value=1.5, vertex1=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[4], vertex2=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[10])
mdb.models['SingleSimulation'].sketches['sketchTool'].Spot(point=(-1.425, 
    -1.275))
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[11], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[2])
mdb.models['SingleSimulation'].sketches['sketchTool'].ObliqueDimension(
    textPoint=(-1.98067395968628, -1.20997364997864), value=1.5, vertex1=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[11], 
    vertex2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[0])
mdb.models['SingleSimulation'].sketches['sketchTool'].Line(point1=(-1.4025, 
    -1.155), point2=(-1.0725, -1.4025))
mdb.models['SingleSimulation'].sketches['sketchTool'].Line(point1=(-0.165, 
    -2.145), point2=(-0.2475, -1.815))
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[12], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[11])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[9], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[9])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[14], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[10])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[7], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[10])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[15], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[13])
mdb.models['SingleSimulation'].sketches['sketchTool'].Spot(point=(1.35, -1.35))
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[16], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[4])
mdb.models['SingleSimulation'].sketches['sketchTool'].VerticalDimension(
    textPoint=(1.66873724179077, -2.03905059576035), value=1.14, vertex1=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[16], 
    vertex2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[3])
mdb.models['SingleSimulation'].sketches['sketchTool'].Line(point1=(0.255, 
    -1.36), point2=(0.85, -1.19))
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[18], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[16])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[17], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[13])
mdb.models['SingleSimulation'].sketches['sketchTool'].Line(point1=(
    0.299743451380973, 2.71355728388917), point2=(-0.17, 1.445))
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[19], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[3])
mdb.models['SingleSimulation'].sketches['sketchTool'].ParallelConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[12], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].geometry[2])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[20], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[13])
mdb.models['SingleSimulation'].sketches['sketchTool'].Line(point1=(
    -1.90824233575058, -2.50458845674992), point2=(-1.92693637891006, 
    -2.53446565747261))
mdb.models['SingleSimulation'].sketches['sketchTool'].Line(point1=(
    -1.99049629850578, -2.48404787659645), point2=(-1.97086750550461, 
    -2.50645578086376))
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[24], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[6])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[23], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[0])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[21], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[6])
mdb.models['SingleSimulation'].sketches['sketchTool'].CoincidentConstraint(
    entity1=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[22], 
    entity2=mdb.models['SingleSimulation'].sketches['sketchTool'].vertices[4])
mdb.models['SingleSimulation'].parts['Tool'].PartitionFaceBySketch(faces=
    mdb.models['SingleSimulation'].parts['Tool'].faces.getSequenceFromMask((
    '[#20 ]', ), ), sketch=
    mdb.models['SingleSimulation'].sketches['sketchTool'], sketchUpEdge=
    mdb.models['SingleSimulation'].parts['Tool'].edges[7])
mdb.models['SingleSimulation'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#1 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Tool'].edges[9], 
    mdb.models['SingleSimulation'].parts['Tool'].edges[10], 
    mdb.models['SingleSimulation'].parts['Tool'].edges[11], 
    mdb.models['SingleSimulation'].parts['Tool'].edges[12]), line=
    mdb.models['SingleSimulation'].parts['Tool'].edges[26], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#2 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Tool'].edges[21], 
    mdb.models['SingleSimulation'].parts['Tool'].edges[23]), line=
    mdb.models['SingleSimulation'].parts['Tool'].edges[33], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#4 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Tool'].edges[32], 
    mdb.models['SingleSimulation'].parts['Tool'].edges[34]), line=
    mdb.models['SingleSimulation'].parts['Tool'].edges[5], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#8 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Tool'].edges[35], ), line=
    mdb.models['SingleSimulation'].parts['Tool'].edges[20], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#1 ]', ), ), edges=(
    mdb.models['SingleSimulation'].parts['Tool'].edges[42], ), line=
    mdb.models['SingleSimulation'].parts['Tool'].edges[30], sense=REVERSE)
mdb.models['SingleSimulation'].parts['Tool'].ReferencePoint(point=
    mdb.models['SingleSimulation'].parts['Tool'].InterestingPoint(
    mdb.models['SingleSimulation'].parts['Tool'].edges[5], MIDDLE))
mdb.models['SingleSimulation'].parts['Tool'].Set(name='ToolRP', 
    referencePoints=(
    mdb.models['SingleSimulation'].parts['Tool'].referencePoints[8], ))
mdb.models['SingleSimulation'].parts['Tool'].Set(cells=
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#7f ]', ), ), name='ToolDomain')
mdb.models['SingleSimulation'].HomogeneousSolidSection(material='WG-300', name=
    'ToolSection', thickness=None)
mdb.models['SingleSimulation'].parts['Tool'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['SingleSimulation'].parts['Tool'].sets['ToolDomain'], 
    sectionName='ToolSection', thicknessAssignment=FROM_SECTION)
mdb.models['SingleSimulation'].parts['Tool'].Set(name=
    'ToolTemperatureOutputSet', vertices=
    mdb.models['SingleSimulation'].parts['Tool'].vertices.getSequenceFromMask((
    '[#4000 ]', ), ))
mdb.models['SingleSimulation'].parts['Tool'].Surface(name='ToolSurface', 
    side1Faces=
    mdb.models['SingleSimulation'].parts['Tool'].faces.getSequenceFromMask((
    '[#640a0000 ]', ), ))
mdb.models['SingleSimulation'].parts['Tool'].setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#7f ]', ), ), technique=SWEEP)
mdb.models['SingleSimulation'].parts['Tool'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['SingleSimulation'].parts['Tool'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8T, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=EXPLICIT), 
    ElemType(elemCode=C3D4T, elemLibrary=EXPLICIT)), regions=(
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#7f ]', ), ), ))
mdb.models['SingleSimulation'].parts['Tool'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8T, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=EXPLICIT), 
    ElemType(elemCode=C3D4T, elemLibrary=EXPLICIT)), regions=(
    mdb.models['SingleSimulation'].parts['Tool'].cells.getSequenceFromMask((
    '[#7f ]', ), ), ))
mdb.models['SingleSimulation'].parts['Tool'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['SingleSimulation'].parts['Tool'].edges.getSequenceFromMask((
    '[#2800 ]', ), ), minSizeFactor=0.1, size=0.1)
mdb.models['SingleSimulation'].parts['Tool'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['SingleSimulation'].parts['Tool'].edges.getSequenceFromMask((
    '[#10500000 #40201 ]', ), ), end2Edges=
    mdb.models['SingleSimulation'].parts['Tool'].edges.getSequenceFromMask((
    '[#81040080 #20002 ]', ), ), maxSize=0.06, minSize=0.01)
mdb.models['SingleSimulation'].parts['Tool'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['SingleSimulation'].parts['Tool'].edges.getSequenceFromMask((
    '[#6c000100 #80e4 ]', ), ), minSizeFactor=0.1, size=0.01)
mdb.models['SingleSimulation'].parts['Tool'].generateMesh()
mdb.models['SingleSimulation'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['SingleSimulation'].rootAssembly.Instance(dependent=ON, name=
    'ChipPlate-1', part=mdb.models['SingleSimulation'].parts['ChipPlate'])
mdb.models['SingleSimulation'].rootAssembly.Instance(dependent=ON, name=
    'Eulerian-1', part=mdb.models['SingleSimulation'].parts['Eulerian'])
mdb.models['SingleSimulation'].rootAssembly.Instance(dependent=ON, name=
    'Tool-1', part=mdb.models['SingleSimulation'].parts['Tool'])
mdb.models['SingleSimulation'].rootAssembly.translate(instanceList=(
    'ChipPlate-1', ), vector=(1.3, 1.35, 0.0))
mdb.models['SingleSimulation'].rootAssembly.translate(instanceList=('Tool-1', )
    , vector=(3.0, 1.3, 0.0))
mdb.models['SingleSimulation'].rootAssembly.translate(instanceList=('Tool-1', )
    , vector=(0.0, -0.05, 0.0))
mdb.models['SingleSimulation'].rootAssembly.Set(cells=
    mdb.models['SingleSimulation'].rootAssembly.instances['ChipPlate-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['SingleSimulation'].rootAssembly.instances['Eulerian-1'].cells.getSequenceFromMask(
    mask=('[#1ffffff ]', ), )+\
    mdb.models['SingleSimulation'].rootAssembly.instances['Tool-1'].cells.getSequenceFromMask(
    mask=('[#7f ]', ), ), name='AssembleSet')
mdb.models['SingleSimulation'].TempDisplacementDynamicsStep(improvedDtMethod=ON
    , name='CuttingStep', previous='Initial', timePeriod=0.003)
mdb.models['SingleSimulation'].FieldOutputRequest(createStepName='CuttingStep', 
    name='FieldOutput', variables=('NT', 'HFL'))
mdb.models['SingleSimulation'].HistoryOutputRequest(createStepName=
    'CuttingStep', name='CuttingForce', numIntervals=1000, rebar=EXCLUDE, 
    region=
    mdb.models['SingleSimulation'].rootAssembly.allInstances['Tool-1'].sets['ToolRP']
    , sectionPoints=DEFAULT, variables=('RF1', 'RF2', 'RF3'))
mdb.models['SingleSimulation'].HistoryOutputRequest(createStepName=
    'CuttingStep', name='IHE_ALL', numIntervals=1000, rebar=EXCLUDE, region=
    mdb.models['SingleSimulation'].rootAssembly.sets['AssembleSet'], 
    sectionPoints=DEFAULT, variables=('ALLIHE', ))
mdb.models['SingleSimulation'].HistoryOutputRequest(createStepName=
    'CuttingStep', name='IHE_Bilanz', numIntervals=1000, rebar=EXCLUDE, region=
    mdb.models['SingleSimulation'].rootAssembly.allInstances['Eulerian-1'].sets['EulerDomain']
    , sectionPoints=DEFAULT, variables=('ALLIHE', ))
mdb.models['SingleSimulation'].HistoryOutputRequest(createStepName=
    'CuttingStep', name='IHE_TOOL', numIntervals=1000, rebar=EXCLUDE, region=
    mdb.models['SingleSimulation'].rootAssembly.allInstances['Tool-1'].sets['ToolDomain']
    , sectionPoints=DEFAULT, variables=('ALLIHE', ))
mdb.models['SingleSimulation'].HistoryOutputRequest(createStepName=
    'CuttingStep', name='IHE_Workpiece', numIntervals=1000, rebar=EXCLUDE, 
    region=
    mdb.models['SingleSimulation'].rootAssembly.allInstances['Eulerian-1'].sets['WorkpieceDomain']
    , sectionPoints=DEFAULT, variables=('ALLIHE', ))
mdb.models['SingleSimulation'].HistoryOutputRequest(createStepName=
    'CuttingStep', name='Temperature_Tool', rebar=EXCLUDE, region=
    mdb.models['SingleSimulation'].rootAssembly.allInstances['Tool-1'].sets['ToolTemperatureOutputSet']
    , sectionPoints=DEFAULT, variables=('NT', ))
mdb.models['SingleSimulation'].ContactProperty('chip-plate-contact')
mdb.models['SingleSimulation'].interactionProperties['chip-plate-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.01, ), ), temperatureDependency=OFF)
mdb.models['SingleSimulation'].interactionProperties['chip-plate-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['SingleSimulation'].ContactProperty('self-contact')
mdb.models['SingleSimulation'].interactionProperties['self-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.015, ), ), temperatureDependency=OFF)
mdb.models['SingleSimulation'].interactionProperties['self-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['SingleSimulation'].ContactProperty('tool-chip-contact')
mdb.models['SingleSimulation'].interactionProperties['tool-chip-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.46, 100.0), (0.46, 150.0), (0.46, 200.0), (0.459979, 225.0), (
    0.459888, 250.0), (0.459703, 275.0), (0.459407, 300.0)), 
    temperatureDependency=ON)
mdb.models['SingleSimulation'].interactionProperties['tool-chip-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['SingleSimulation'].interactionProperties['tool-chip-contact'].ThermalConductance(
    clearanceDependency=OFF, definition=TABULAR, dependenciesP=0, 
    massFlowRateDependencyP=OFF, pressureDepTable=((10000.0, 0.0), (10000.0, 
    1000.0)), pressureDependency=ON, temperatureDependencyP=OFF)
mdb.models['SingleSimulation'].interactionProperties['tool-chip-contact'].HeatGeneration(
    conversionFraction=0.9, secondaryFraction=0.5)
mdb.models['SingleSimulation'].ContactExp(createStepName='CuttingStep', name=
    'contact')
mdb.models['SingleSimulation'].interactions['contact'].includedPairs.setValuesInStep(
    stepName='CuttingStep', useAllstar=ON)
mdb.models['SingleSimulation'].interactions['contact'].contactPropertyAssignments.appendInStep(
    assignments=((GLOBAL, SELF, 'tool-chip-contact'), (
    mdb.models['SingleSimulation'].rootAssembly.instances['ChipPlate-1'].surfaces['ChipPlateSurface'], 
    'Eulerian-1.da718-1', 'chip-plate-contact')), stepName='CuttingStep')
mdb.models['SingleSimulation'].RigidBody(bodyRegion=
    mdb.models['SingleSimulation'].rootAssembly.instances['Tool-1'].sets['ToolDomain']
    , name='ToolConstraint', refPointRegion=
    mdb.models['SingleSimulation'].rootAssembly.instances['Tool-1'].sets['ToolRP'])
mdb.models['SingleSimulation'].RigidBody(bodyRegion=
    mdb.models['SingleSimulation'].rootAssembly.instances['ChipPlate-1'].sets['PlateDomain']
    , name='ChipPlateConstraint', refPointRegion=
    mdb.models['SingleSimulation'].rootAssembly.instances['ChipPlate-1'].sets['PlateRP'])
mdb.models['SingleSimulation'].VelocityBC(amplitude=UNSET, createStepName=
    'CuttingStep', distributionType=UNIFORM, fieldName='', localCsys=None, 
    name='BC-WorkpieceBottom', region=
    mdb.models['SingleSimulation'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceBottom']
    , v1=833.33, v2=0.0, v3=0.0, vr1=0.0, vr2=0.0, vr3=0.0)
mdb.models['SingleSimulation'].VelocityBC(amplitude=UNSET, createStepName=
    'CuttingStep', distributionType=UNIFORM, fieldName='', localCsys=None, 
    name='BC-zLock', region=
    mdb.models['SingleSimulation'].rootAssembly.instances['Eulerian-1'].sets['EulerDomain']
    , v1=UNSET, v2=UNSET, v3=0.0, vr1=UNSET, vr2=UNSET, vr3=UNSET)
mdb.models['SingleSimulation'].EncastreBC(createStepName='CuttingStep', 
    localCsys=None, name='ToolFix', region=
    mdb.models['SingleSimulation'].rootAssembly.instances['Tool-1'].sets['ToolRP'])
mdb.models['SingleSimulation'].EncastreBC(createStepName='CuttingStep', 
    localCsys=None, name='ChipPlateFix', region=
    mdb.models['SingleSimulation'].rootAssembly.instances['ChipPlate-1'].sets['PlateRP'])
mdb.models['SingleSimulation'].Velocity(distributionType=MAGNITUDE, field='', 
    name='cuttingMove', omega=0.0, region=
    mdb.models['SingleSimulation'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceDomain']
    , velocity1=833.33)
mdb.models['SingleSimulation'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(29.0, ), name='InitialTemperature', region=
    mdb.models['SingleSimulation'].rootAssembly.sets['AssembleSet'])
mdb.models['SingleSimulation'].MaterialAssignment(assignmentList=((
    mdb.models['SingleSimulation'].rootAssembly.instances['Eulerian-1'].sets['EulerDomain'], 
    (0, )), (
    mdb.models['SingleSimulation'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceDomain'], 
    (1, ))), instanceList=(
    mdb.models['SingleSimulation'].rootAssembly.instances['Eulerian-1'], ), 
    name='MaterialAssignment', useFields=False)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='SingleSimulation', modelPrint=OFF
    , multiprocessingMode=DEFAULT, name='SingleSimulation', 
    nodalOutputPrecision=SINGLE, numCpus=6, numDomains=6, 
    numThreadsPerMpiProcess=1, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
from job import *
del mdb.models['restartMode']
# Save by adam-ua769pu3t3n7k4o on 2024_09_25-09.56.19; build 2023 2022_09_28-20.11.55 183150
